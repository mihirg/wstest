<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">This is the home page</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <h3>Chat</h3>
                <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">

                </div>

                <div class="form-group">
                    <label for="message">Message</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">

                </div>
                <hr>

                <a href="javascript:void(0)" id="getcookie" class="btn btn-outline-secondary">GetCookie</a>
                <a href="javascript:void(0)" id="start" class="btn btn-outline-secondary">Start</a>
                <a href="javascript:void(0)" id="sendBtn" class="btn btn-outline-secondary">Send Message</a>
                <input type="hidden" name="action" id="action">

                <div id="status" class="mt-2 float-end"></div>

                <div id="output" class="chatbox mt-3" >

                </div>

            </div>
            <div class="col-md-4">
                <h3>Who's Online</h3>
                <ul id="online_users">

                </ul>
            </div>

        </div>
    </div>
</body>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = function() {
        console.log("leaving page");
        let jsonData = {};
        jsonData['action'] = "left";
        socket.send(JSON.stringify(jsonData));
    }
//    document.addEventListener("DOMContentLoaded", function() {
      document.getElementById("start").addEventListener("click", function() {
        socket = new ReconnectingWebSocket("ws://localhost:8080/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger">Not Connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;
        let status = document.getElementById("status");

        socket.onopen = () => {
            status.innerHTML = online;
            console.log("successfully connected");
        }

        socket.onclose = () => {
            status.innerHTML = offline;
            console.log("socket closed");
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data)
            console.log("Action is ", data.action)
            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    // empty the element
                    while(ul.firstChild)
                        ul.removeChild(ul.firstChild);
                    if(data.connected_users.length > 0) {
                        data.connected_users.forEach(function(item){
                           let li = document.createElement("li")
                           li.appendChild(document.createTextNode(item));
                           ul.appendChild(li);
                        });
                    }
                    break;
                case "broadcast":
                    let chatbox = document.getElementById("output");
                    chatbox.innerHTML = chatbox.innerHTML + data.message + "";

                    break;
            }
        }

        socket.onerror = error => {
            console.log("error occured");
        }

        userField.addEventListener("change", function() {
            let jsonData = {};
            jsonData['action'] = "username"
            jsonData['username'] = this.value;
            socket.send(JSON.stringify(jsonData));
        });

        document.getElementById("sendBtn").addEventListener("click", function() {
            if (userField.value === "" || messageField.value === "") {
                errorMessage("Fill user and message");
                return false;
            } else {
                sendMessage();
            }
        });


    })

    document.getElementById("getcookie").addEventListener("click", function() {
        console.log("debug");
        let xhr = new XMLHttpRequest();
        xhr.open("POST", "/token");
        xhr.send();
    });

    messageField.addEventListener("keydown", function(event) {
       if (event.code == "Enter") {
           if (!socket) {
               console.log("no connection");
               return false;
           }
           event.preventDefault();
           event.stopPropagation();
           sendMessage();

       }
    });

    function sendMessage() {
        let jsonData = {};
        jsonData['action'] = 'broadcast';
        jsonData['username'] = userField.value;
        jsonData['message'] = messageField.value;
        // xhr.post
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: 'error',
            text: msg,
            stay: false,
            time: 3,
            position: 'top'
        });

    }
</script>
</html>